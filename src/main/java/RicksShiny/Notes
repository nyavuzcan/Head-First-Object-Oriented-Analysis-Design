GREAT SOFTWARE IN 3 EASY STEPS

1- MAKE SURE YOUR SOFTWARE DOES WHAT THE CUSTOMER WANTS IT TO DO-> FOCUS ON THE CUSTOMER.

2- APPLY BASIC OO PRINCIPLES TO ADD FLEXIBILITY.(SOLID)

3- STRIVE FOR A MAINTAINABLE, REUSABLE DESIGN (USE DESIGN PATTERNS- LOW COUPLING HIGH COHESION)

! When need string comp, if values and types is limited we should use Enums which can be type safety.
and avoid string case, spell problems


OOP

1- Objects should do what their names indicate.

2- Each object should represent a single concept. Single duty.

3- Unused properties are a dead giveaway. (Null pass parameter.) We should use subset properties.

DELEGATE COMPRASIONS TO GUITARSPEC :  Deleagtion is when an object needs to perform  a certain task, and instead of doing that task directly, it asks another
object to handle task. Search() methon in Inventory to ask GuitarSpect to tell if two specs are
equal instead of compaing the two GuitarSpec objects directly within the search method itself.
Delegation makes your code more reusable.
One of the most common examples of delegation in Java is the equals(). This means
your objecs are more independent of each other(Two GuitarSpec). more loosely copled. So easy reused.

Loosely copled: Object have specific job to do. Whic each do a single task really well.